// Code generated by MockGen. DO NOT EDIT.
// Source: domain/course-enrollment/course-enrollment.go

// Package courseenrollmentdomain is a generated GoMock package.
package courseenrollmentdomain

import (
	context "context"
	courseenrollmentdomain "github/rakadityas/course-management-system/domain/course-enrollment"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCourseEnrollmentDomainItf is a mock of CourseEnrollmentDomainItf interface.
type MockCourseEnrollmentDomainItf struct {
	ctrl     *gomock.Controller
	recorder *MockCourseEnrollmentDomainItfMockRecorder
}

// MockCourseEnrollmentDomainItfMockRecorder is the mock recorder for MockCourseEnrollmentDomainItf.
type MockCourseEnrollmentDomainItfMockRecorder struct {
	mock *MockCourseEnrollmentDomainItf
}

// NewMockCourseEnrollmentDomainItf creates a new mock instance.
func NewMockCourseEnrollmentDomainItf(ctrl *gomock.Controller) *MockCourseEnrollmentDomainItf {
	mock := &MockCourseEnrollmentDomainItf{ctrl: ctrl}
	mock.recorder = &MockCourseEnrollmentDomainItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseEnrollmentDomainItf) EXPECT() *MockCourseEnrollmentDomainItfMockRecorder {
	return m.recorder
}

// CreateEnrollment mocks base method.
func (m *MockCourseEnrollmentDomainItf) CreateEnrollment(ctx context.Context, studentID, courseID int64, status int) (courseenrollmentdomain.CourseEnrollment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnrollment", ctx, studentID, courseID, status)
	ret0, _ := ret[0].(courseenrollmentdomain.CourseEnrollment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnrollment indicates an expected call of CreateEnrollment.
func (mr *MockCourseEnrollmentDomainItfMockRecorder) CreateEnrollment(ctx, studentID, courseID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnrollment", reflect.TypeOf((*MockCourseEnrollmentDomainItf)(nil).CreateEnrollment), ctx, studentID, courseID, status)
}

// GetEnrollmentByStudentID mocks base method.
func (m *MockCourseEnrollmentDomainItf) GetEnrollmentByStudentID(ctx context.Context, studentID int64) ([]courseenrollmentdomain.CourseEnrollment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnrollmentByStudentID", ctx, studentID)
	ret0, _ := ret[0].([]courseenrollmentdomain.CourseEnrollment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnrollmentByStudentID indicates an expected call of GetEnrollmentByStudentID.
func (mr *MockCourseEnrollmentDomainItfMockRecorder) GetEnrollmentByStudentID(ctx, studentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnrollmentByStudentID", reflect.TypeOf((*MockCourseEnrollmentDomainItf)(nil).GetEnrollmentByStudentID), ctx, studentID)
}

// GetEnrollmentByStudentIDAndCourseID mocks base method.
func (m *MockCourseEnrollmentDomainItf) GetEnrollmentByStudentIDAndCourseID(ctx context.Context, studentID, courseID int64) ([]courseenrollmentdomain.CourseEnrollment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnrollmentByStudentIDAndCourseID", ctx, studentID, courseID)
	ret0, _ := ret[0].([]courseenrollmentdomain.CourseEnrollment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnrollmentByStudentIDAndCourseID indicates an expected call of GetEnrollmentByStudentIDAndCourseID.
func (mr *MockCourseEnrollmentDomainItfMockRecorder) GetEnrollmentByStudentIDAndCourseID(ctx, studentID, courseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnrollmentByStudentIDAndCourseID", reflect.TypeOf((*MockCourseEnrollmentDomainItf)(nil).GetEnrollmentByStudentIDAndCourseID), ctx, studentID, courseID)
}

// GetListClassmates mocks base method.
func (m *MockCourseEnrollmentDomainItf) GetListClassmates(ctx context.Context, studentID int64) ([]courseenrollmentdomain.CourseEnrollment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListClassmates", ctx, studentID)
	ret0, _ := ret[0].([]courseenrollmentdomain.CourseEnrollment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListClassmates indicates an expected call of GetListClassmates.
func (mr *MockCourseEnrollmentDomainItfMockRecorder) GetListClassmates(ctx, studentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListClassmates", reflect.TypeOf((*MockCourseEnrollmentDomainItf)(nil).GetListClassmates), ctx, studentID)
}

// UpdateCourseEnrollmentStatus mocks base method.
func (m *MockCourseEnrollmentDomainItf) UpdateCourseEnrollmentStatus(ctx context.Context, studentID, courseID int64, newStatus int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCourseEnrollmentStatus", ctx, studentID, courseID, newStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCourseEnrollmentStatus indicates an expected call of UpdateCourseEnrollmentStatus.
func (mr *MockCourseEnrollmentDomainItfMockRecorder) UpdateCourseEnrollmentStatus(ctx, studentID, courseID, newStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourseEnrollmentStatus", reflect.TypeOf((*MockCourseEnrollmentDomainItf)(nil).UpdateCourseEnrollmentStatus), ctx, studentID, courseID, newStatus)
}
