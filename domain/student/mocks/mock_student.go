// Code generated by MockGen. DO NOT EDIT.
// Source: domain/student/student.go

// Package studentdomain is a generated GoMock package.
package studentdomain

import (
	context "context"
	student "github/rakadityas/course-management-system/domain/student"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStudentDomainItf is a mock of StudentDomainItf interface.
type MockStudentDomainItf struct {
	ctrl     *gomock.Controller
	recorder *MockStudentDomainItfMockRecorder
}

// MockStudentDomainItfMockRecorder is the mock recorder for MockStudentDomainItf.
type MockStudentDomainItfMockRecorder struct {
	mock *MockStudentDomainItf
}

// NewMockStudentDomainItf creates a new mock instance.
func NewMockStudentDomainItf(ctrl *gomock.Controller) *MockStudentDomainItf {
	mock := &MockStudentDomainItf{ctrl: ctrl}
	mock.recorder = &MockStudentDomainItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStudentDomainItf) EXPECT() *MockStudentDomainItfMockRecorder {
	return m.recorder
}

// GetStudentByID mocks base method.
func (m *MockStudentDomainItf) GetStudentByID(ctx context.Context, studentID int64) (*student.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentByID", ctx, studentID)
	ret0, _ := ret[0].(*student.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentByID indicates an expected call of GetStudentByID.
func (mr *MockStudentDomainItfMockRecorder) GetStudentByID(ctx, studentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentByID", reflect.TypeOf((*MockStudentDomainItf)(nil).GetStudentByID), ctx, studentID)
}
