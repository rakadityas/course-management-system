// Code generated by MockGen. DO NOT EDIT.
// Source: use-case/enrollment/enrollment.go

// Package enrollmentusecase is a generated GoMock package.
package enrollmentusecase

import (
	context "context"
	enrollmentusecase "github/rakadityas/course-management-system/use-case/enrollment"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEnrollmentUseCaseItf is a mock of EnrollmentUseCaseItf interface.
type MockEnrollmentUseCaseItf struct {
	ctrl     *gomock.Controller
	recorder *MockEnrollmentUseCaseItfMockRecorder
}

// MockEnrollmentUseCaseItfMockRecorder is the mock recorder for MockEnrollmentUseCaseItf.
type MockEnrollmentUseCaseItfMockRecorder struct {
	mock *MockEnrollmentUseCaseItf
}

// NewMockEnrollmentUseCaseItf creates a new mock instance.
func NewMockEnrollmentUseCaseItf(ctrl *gomock.Controller) *MockEnrollmentUseCaseItf {
	mock := &MockEnrollmentUseCaseItf{ctrl: ctrl}
	mock.recorder = &MockEnrollmentUseCaseItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnrollmentUseCaseItf) EXPECT() *MockEnrollmentUseCaseItfMockRecorder {
	return m.recorder
}

// CancelCourse mocks base method.
func (m *MockEnrollmentUseCaseItf) CancelCourse(ctx context.Context, studentID, courseID int64) (enrollmentusecase.CancelCourseResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelCourse", ctx, studentID, courseID)
	ret0, _ := ret[0].(enrollmentusecase.CancelCourseResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelCourse indicates an expected call of CancelCourse.
func (mr *MockEnrollmentUseCaseItfMockRecorder) CancelCourse(ctx, studentID, courseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelCourse", reflect.TypeOf((*MockEnrollmentUseCaseItf)(nil).CancelCourse), ctx, studentID, courseID)
}

// CourseSignUp mocks base method.
func (m *MockEnrollmentUseCaseItf) CourseSignUp(ctx context.Context, req enrollmentusecase.CourseSignUpRequest) (enrollmentusecase.CourseSignUpResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CourseSignUp", ctx, req)
	ret0, _ := ret[0].(enrollmentusecase.CourseSignUpResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CourseSignUp indicates an expected call of CourseSignUp.
func (mr *MockEnrollmentUseCaseItfMockRecorder) CourseSignUp(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CourseSignUp", reflect.TypeOf((*MockEnrollmentUseCaseItf)(nil).CourseSignUp), ctx, req)
}

// ListClassmates mocks base method.
func (m *MockEnrollmentUseCaseItf) ListClassmates(ctx context.Context, studentID int64) (enrollmentusecase.ListClassmatesResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClassmates", ctx, studentID)
	ret0, _ := ret[0].(enrollmentusecase.ListClassmatesResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClassmates indicates an expected call of ListClassmates.
func (mr *MockEnrollmentUseCaseItfMockRecorder) ListClassmates(ctx, studentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClassmates", reflect.TypeOf((*MockEnrollmentUseCaseItf)(nil).ListClassmates), ctx, studentID)
}

// ListCourses mocks base method.
func (m *MockEnrollmentUseCaseItf) ListCourses(ctx context.Context, studentID int64) (enrollmentusecase.ListCoursesResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCourses", ctx, studentID)
	ret0, _ := ret[0].(enrollmentusecase.ListCoursesResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCourses indicates an expected call of ListCourses.
func (mr *MockEnrollmentUseCaseItfMockRecorder) ListCourses(ctx, studentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCourses", reflect.TypeOf((*MockEnrollmentUseCaseItf)(nil).ListCourses), ctx, studentID)
}
